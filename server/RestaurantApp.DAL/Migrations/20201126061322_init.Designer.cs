// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantApp.DAL;

namespace RestaurantApp.DAL.Migrations
{
    [DbContext(typeof(RestaurantAppContext))]
    [Migration("20201126061322_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RestaurantApp.DAL.Models.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedOn = new DateTime(2020, 11, 26, 1, 13, 22, 23, DateTimeKind.Local).AddTicks(909),
                            Name = "Manager",
                            Password = "$2a$11$nILgRZIyxNGXQsDBWGxG3OLafmwWxSy1AV8ppC/fDVNAUWvNvoZHi",
                            Phone = "8032260689",
                            Role = "Manager"
                        });
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.Card", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EncryptedCardInfo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastFourDigit")
                        .HasColumnType("varchar(4) CHARACTER SET utf8mb4")
                        .HasMaxLength(4);

                    b.Property<bool>("UseAsDefault")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("double");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.MenuEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("MenuID");

                    b.ToTable("MenuEntries");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.MenuItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanAddSides")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MenuEntryID")
                        .HasColumnType("int");

                    b.Property<string>("MenuOptionGroups")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("OptionPriceMultiplier")
                        .HasColumnType("double");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("MenuEntryID");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.MenuOptionGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("MenuID");

                    b.ToTable("MenuOptionGroups");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.MenuOptionItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.ToTable("MenuOptionItems");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalRequest")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EncryptedCardInfo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Tip")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("MenuID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.OrderRule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ActiveTarget")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("OrderRules");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ActiveTarget = true,
                            Name = "Global"
                        });
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.OrderRuleTimeRange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DaysOfWeek")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OrderRuleID")
                        .HasColumnType("int");

                    b.Property<string>("Start")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Stop")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("OrderRuleID");

                    b.ToTable("OrderRuleTimeRanges");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.OrderedItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdditionalRequest")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MenuItemID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MenuItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderedItems");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.OrderedItemMenuOptionItem", b =>
                {
                    b.Property<int>("MenuOptionItemID")
                        .HasColumnType("int");

                    b.Property<int>("OrderedItemID")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MenuOptionItemID", "OrderedItemID", "Key");

                    b.HasIndex("OrderedItemID");

                    b.ToTable("OrderedItemMenuOptionItems");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.Card", b =>
                {
                    b.HasOne("RestaurantApp.DAL.Models.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.MenuEntry", b =>
                {
                    b.HasOne("RestaurantApp.DAL.Models.Menu", "Menu")
                        .WithMany("MenuEntries")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.MenuItem", b =>
                {
                    b.HasOne("RestaurantApp.DAL.Models.MenuEntry", "MenuEntry")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.MenuOptionGroup", b =>
                {
                    b.HasOne("RestaurantApp.DAL.Models.Menu", "Menu")
                        .WithMany("OptionGroups")
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.MenuOptionItem", b =>
                {
                    b.HasOne("RestaurantApp.DAL.Models.MenuOptionGroup", "Group")
                        .WithMany("MenuOptionItems")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.Order", b =>
                {
                    b.HasOne("RestaurantApp.DAL.Models.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountID");

                    b.HasOne("RestaurantApp.DAL.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.OrderRuleTimeRange", b =>
                {
                    b.HasOne("RestaurantApp.DAL.Models.OrderRule", "OrderRule")
                        .WithMany("ActiveTimes")
                        .HasForeignKey("OrderRuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.OrderedItem", b =>
                {
                    b.HasOne("RestaurantApp.DAL.Models.MenuItem", "MenuItem")
                        .WithMany("OrderedItems")
                        .HasForeignKey("MenuItemID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RestaurantApp.DAL.Models.Order", "Order")
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantApp.DAL.Models.OrderedItemMenuOptionItem", b =>
                {
                    b.HasOne("RestaurantApp.DAL.Models.MenuOptionItem", "MenuOptionItem")
                        .WithMany("OrderedItems")
                        .HasForeignKey("MenuOptionItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApp.DAL.Models.OrderedItem", "OrderedItem")
                        .WithMany("OrderedOptions")
                        .HasForeignKey("OrderedItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
